 1. 编写一个递归版本的 reverse(s) 函数(或方法),以将字符串s倒置。
     #+BEGIN_SRC javascript
     function handleRes(s){
         let arr = s.split('');
		 arr.reverse()
         console.log(arr.join(''));
         return arr.join('');
     }
	 handleRes('123456789')
     #+END_SRC

  2. 编写程序 expr，以计算从命令行输入的逆波兰表达式的值，其中每个运算符或操作数用一个单独的参数表示。例如，命令 expr 2 3 4 + *

  3. 用归并排序将3，1，4，1，5，9，2，6 排序。
     #+BEGIN_SRC javascript
     var arr = [3,1,4,1,5,9,2,6];
     arr.sort(function (a, b) {
       return a-b;
     });
	 console.log(arr);
     #+END_SRC

  4. 对下面的 json 字符串 serial 相同的进行去重。
     #+BEGIN_SRC javascript
	 let arr = [{
				"name": "张三",
				"serial": "0001"
			  }, {
				"name": "李四",
				"serial": "0002"
			  }, {
				"name": "王五",
				"serial": "0003"
			  }, {
				"name": "王五2",
				"serial": "0003"
			  }, {
				"name": "赵四",
				"serial": "0004"
			  }, {
				"name": "小明",
				"serial": "005"
			  }, {
				"name": "小张",
				"serial": "006"
			  }, {
				"name": "小李",
				"serial": "006"
			  }, {
				"name": "小李2",
				"serial": "006"
			  }, {
				"name": "赵四2",
				"serial": "0004"
			  }];
	 function unique(arr){
		for(var i=0; i<arr.length; i++){
			for(var j=i+1; j<arr.length; j++){
				if(arr[i]['serial']==arr[j]['serial']){
					arr.splice(j,1);
					j--;
				}
			}
		}	 
		return arr;
	 }		  
	 arr = unique(arr)
	 console.log(arr)
     #+END_SRC

  5. 把下面给出的扁平化json数据用递归的方式改写成组织树的形式
	 #+BEGIN_SRC javascript
	 let arr = [
				{
				  "id": "1",
				  "name": "中国",
				  "code": "110",
				  "parent": ""
				},
				{
				  "id": "2",
				  "name": "北京市",
				  "code": "110000",
				  "parent": "110"
				},
				{
				  "id": "3",
				  "name": "河北省",
				  "code": "130000",
				  "parent": "110"
				},
				{
				  "id": "4",
				  "name": "四川省",
				  "code": "510000",
				  "parent": "110"
				},
				{
				  "id": "5",
				  "name": "石家庄市",
				  "code": "130001",
				  "parent": "130000"
				},
				{
				  "id": "6",
				  "name": "唐山市",
				  "code": "130002",
				  "parent": "130000"
				},
				{
				  "id": "7",
				  "name": "邢台市",
				  "code": "130003",
				  "parent": "130000"
				},
				{
				  "id": "8",
				  "name": "成都市",
				  "code": "510001",
				  "parent": "510000"
				},
				{
				  "id": "9",
				  "name": "简阳市",
				  "code": "510002",
				  "parent": "510000"
				},
				{
				  "id": "10",
				  "name": "武侯区",
				  "code": "51000101",
				  "parent": "510001"
				},
				{
				  "id": "11",
				  "name": "金牛区",
				  "code": "51000102",
				  "parent": "510001"
				}
			  ];
			  
	function Tree(s){
	  let ind = 0;
	  if(s.length>1){
		  for(let i=0;i<s.length;i++){
			  let a = 0;
			  for(let j=i+1;j<s.length;j++){
				  if(s[j].parent == s[i].code){
					  a++;
					  ind++;
				  }
			  }
			  if(a == 0&&s[i].parent!=''){
				  for(let n in s){
					  s[n].children = s[n].children?s[n].children:[];
					  if(s[n].code == s[i].parent){
						  s[n].children.push(s[i]);
					  }
				  }
				  s.splice(i,1);
				  i--;
			  }
		  }
		  if(ind != 0){
			  Tree(s);
		  }
	  }
	  return s;
	}
	function handleTree(s){ 
	  s = Tree(s);
	  console.log(s);
	  return s;
	}
	handleTree(arr)
  #+END_SRC
      
